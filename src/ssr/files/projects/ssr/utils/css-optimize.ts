import { readFileSync, readdirSync } from "fs";
import { join } from "path";
import { parse, stringify, root, rule, decl, atRule } from "postcss";
import * as purify from "purify-css";
import { createDocument } from "domino";
import { minify } from "html-minifier";
import { filter } from "minimatch";
import { SSRCliOptions } from "./models";
import { readConfig } from "./spwan";

interface BrowserRenderOptions {
  url: string;
}

const configMinify = {
  collapseBooleanAttributes: true,
  collapseInlineTagWhitespace: true,
  collapseWhitespace: true,
  includeAutoGeneratedTags: false,
  minifyCSS: true,
  minifyJS: true,
  minifyURLs: true,
  quoteCharacter: "'",
  removeAttributeQuotes: true,
  removeComments: true,
  removeEmptyAttributes: true,
  removeEmptyElements: true,
  removeRedundantAttributes: true,
  removeScriptTypeAttributes: true,
  removeStyleLinkTypeAttributes: true,
  removeTagWhitespace: true
};




export class PageOptimizer {
  private globalCss: string;
  public initialized: boolean = false;
  public DIST_FOLDER:string;
  public ssrConfig:SSRCliOptions;
  
  
  
  constructor() {
    this.ssrConfig = {
      cliOptions: {
        command:""
      },
      appOptions:{},
      configOptions:readConfig(),
    };
   this.DIST_FOLDER = join(process.cwd(), this.ssrConfig.configOptions.paths.DIST_FOLDER);
 
  }

  async initialize(): Promise<boolean> {
    if (!this.initialized) {
      const DistFiles: any[] = readdirSync(this.DIST_FOLDER, "utf-8");

      const CssFiles = DistFiles.filter(
        filter("styles*.css", { matchBase: true })
      );

      if (CssFiles.length != 1) {
        throw "ERROR: Styles css File not found in dist folder or found more than one  ";
      }

      this.globalCss = readFileSync(join(this.DIST_FOLDER, CssFiles[0].toString())).toString();
      this.initialized = true;
    }
    return true;
  }

  async optimizeCss(html: string): Promise<string> {
    const document = createDocument(html);
    const head = document.querySelector("head");
    const body = document.querySelector("body");
    const styles = head.querySelectorAll("style");

    const newLe = styles.length;
    for (let index = 0; index < newLe; index++) {
      let attr = styles.item(0).innerHTML;
      this.globalCss = this.globalCss + attr;
      head.removeChild(styles.item(0));
    }

    const cssFile = document.querySelector("[rel=stylesheet]");

    const newcss = purify(body.innerHTML, this.globalCss, {
      // Will minify CSS code in addition to purify.
      minify: true,

      // Logs out removed selectors.
      rejected: false
    });

    const newStyle = document.createElement("style");
    newStyle.setAttribute("ng-transition",this.ssrConfig.configOptions.serverapp );
    newStyle.textContent = newcss;
    head.appendChild(newStyle);

    //head.removeChild(cssFile);
    //body.appendChild(cssFile);

    return document.documentElement.outerHTML;
    //return document.documentElement.innerHTML;
  }

  async minifyHtml(html: string) {
    return await minify(html, configMinify);
  }
}
